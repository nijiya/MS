#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Block A*: Database-Driven Search with Applications in Any-angle Path-Planning
\end_layout

\begin_layout Author
Peter Yap, Neil Burch, Rob Holte and Jonathan Schaeffer
\end_layout

\begin_layout Institute
Computer Science Department, University of Alberta, Canada
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Presenter: Tugcem Oral
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{metu-ceng.jpg}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%
\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\begin_inset Note Note
status open

\begin_layout Plain Layout
Grid tabanlı path-planning için arama hızı ve bulunan yolların kalitesinin
 artırıldığı 3 yeni fikir ortaya atılmış.
 LDDB 2komşu nokta arasındaki uzaklıkların tutulduğu bir veritabanı; Block
 A* LDDB based optimal path bulan bir algoritma.
 Deney sonuçları da Block A* ın önceki en iyi any-angle search algoritmasından
 daha iyi olduğunu göstermiş.
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Introduction
\end_layout

\begin_layout Itemize
Paper published in AAAI' 11
\end_layout

\begin_layout Itemize
Fast path planning is challenging due to:
\end_layout

\begin_deeper
\begin_layout Itemize
Behaviour of dynamic environments.
\end_layout

\begin_layout Itemize
Domain may require paths to be computed for multiple agents.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Starcraft ta 8 rakibin max 200 birimi olabilir, her biri için shortest path
 algoritması milisaniyeler içinde çalıştırılıyor.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Grids are standart for highly dynamic multi-agent domains
\begin_inset Note Note
status open

\begin_layout Plain Layout
hızlı olmasından ötürü.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Moving from cell to another can be done in several ways
\end_layout

\begin_deeper
\begin_layout Itemize
Navigate 4 closest neighbours - 90º turns (tile)
\end_layout

\begin_layout Itemize
Navigate 8 closest neighbours - 45º turns (octile) 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Fakat bu ikisi human-like path ler çıkarmaz.
 May result in loss of path optimality.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Navigate on any-angle grid cell.
 (Field D* and Theta*)
\begin_inset Note Note
status open

\begin_layout Plain Layout
Theta* A* dan daha yavaş çalışıyor!
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout BeginFrame
Introduction (cont'd)
\end_layout

\begin_layout Itemize
Three new ideas for grid-based path-planning
\begin_inset Note Note
status open

\begin_layout Plain Layout
Grid tabanlı path-planning için arama hızı ve bulunan yolların kalitesinin
 artırıldığı 3 yeni fikir ortaya atılmış.
 LDDB 2komşu nokta arasındaki uzaklıkların tutulduğu bir veritabanı; Block
 A* LDDB based optimal path bulan bir algoritma.
 Deney sonuçları da Block A* ın önceki en iyi any-angle search algoritmasından
 daha iyi olduğunu göstermiş.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Local Distance Database (LDDB)
\end_layout

\begin_layout Itemize
Block A* Algorithm 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Achives its performance by dealing with block of grid cells (m x n regions
 of cells).
 Klasik pathfinding algoritmaları gibi (1 x 1) değil yani.
 Manipulates blocks of grid cell, rather than a single cell at a time.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Block A* is faster than A* and Theta*, the 
\emph on
previous 
\emph default
best grid based any-angle search algorithm.
\end_layout

\end_deeper
\begin_layout Section
Local Distance Database (LDDB)
\end_layout

\begin_layout BeginFrame
Overview
\end_layout

\begin_layout Itemize
Stores the exact distance between the boundary points of a local region.
\end_layout

\begin_layout Itemize
The search space is grouped into regions of 
\emph on
m x n
\emph default
 contiguous cells.
\end_layout

\begin_layout Itemize
During a search, LDDB is queried to find 
\emph on
g-values.
\begin_inset Note Note
status open

\begin_layout Plain Layout
During a search, the LDDB is queried to find the change in g-values that
 the search will see when it enters a block at one location on the boundary
 of the block and then exits from all of the block’s other boundary locations.
 Assume that x and y are cells on the boundary of a block.
 Querying LDDB[x, y] will return the cost of the least-cost path between
 these two cells.
 For every possible block configuration, the LDDB stores the lowest path
 cost for each (x, y) pair.
 
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Efficiency in LDDB
\end_layout

\begin_layout Itemize
Search space is stored in 2D array 
\begin_inset Note Note
status open

\begin_layout Plain Layout
On many grid-based search problem.
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
For a 
\emph on
b x b 
\emph default
block of cell, there are 
\begin_inset Formula $2^{bxb}$
\end_inset

 possible grid obstruction
\end_layout

\begin_layout Itemize
This constraint is handled in LDDB, a 
\emph on
4x4 
\emph default
block LDDB is already very effective.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
even a simple 2 × 2 block LDDB outperforms A* by a speed factor of 2.
 In practice, only a small subset of these patterns are actually used in
 a particular search, but storing all patterns allows us to handle any search
 domain, including dynamically changing ones, without having to build a
 new LDDB.
 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Symmetry can be used to reduce the number of entries of LDDB.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
(e.g., for some domains rotational symmetry can reduce the size by four).
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
For most domains, there exists unreachable cells and these can be eliminated.
\end_layout

\begin_layout Itemize
An optimal path cost will be stored for every boundary cell of the block
 to every other boundary cell on all four sides of the block.
 
\end_layout

\begin_layout Section
Block A* Algorithm
\end_layout

\begin_layout BeginFrame
Overview
\end_layout

\begin_layout Itemize
Block A* is A* adapted to manipulate a block of cells instead of a single
 cell at a time.
 
\end_layout

\begin_layout Itemize
Each entry on its OPEN list is a block that has been reached but not yet
 expanded, or which needs to be re-expanded because new or cheaper paths
 to it have been found.
 
\end_layout

\begin_layout Itemize
The priority of a block on the OPEN list is called its heap value.
 
\end_layout

\begin_layout Itemize
Like A*, the basic cycle in Block A* is to remove the OPEN entry with the
 lowest heap value and expand it.
 
\end_layout

\begin_deeper
\begin_layout Itemize
The LDDB is used during expansion to compute g-values.
\end_layout

\end_deeper
\begin_layout BeginFrame
Expansion of a Block
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
7cm
\end_layout

\begin_layout Block
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Only horizontal and vertical moves.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
In the centre of the left side of the figure is curBlock, the 5 × 5 block
 with corners A2, A6, E6 and E2, that is about to be expanded.
 The black tiles are obstacles.
 curBlock is on the left edge of the search space so has only three neighbor
 blocks; the grey cells are the cells in the neighbor blocks that are immediatel
y adjacent to cells in curBlock (e.g., cells A1 to E1 are the topmost cells
 of the neighboring block under curBlock).
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Ingress cells are boundary cells of actual block (
\emph on
set of Y
\emph default
) 
\begin_inset Note Note
status open

\begin_layout Plain Layout
if this is the first time curBlock is being expanded then boundary cells
 with a finite g-value are ingress cells.
 In this example, the only ingress cell is E2 with a g-value of 3 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
First Step:
\emph on
 
\emph default
identify 
\emph on
valid egress 
\emph default
cells.

\emph on
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
The first step in expanding curBlock is to identify its valid egress cells
 (line 3), which are the unob- structed boundary cells that are adjacent
 to unobstructed cells in a neighbouring block (which are called their egress
 neighbors (line 4)).
 For example, cell B2 is a valid egress cell but C2 and D2 are not.
 
\end_layout

\begin_layout Plain Layout
Then the LDDB entry for curBlock’s pattern of unobstructed and obstructed
 cells is retrieved and g-values for all valid egress cells (A2, A6, B2,
 E2, E3, E4, and E5) are calculated based on the g-values of the ingress
 cells and the distance between the ingress and egress cells given by the
 LDDB (line 5).
 
\end_layout

\begin_layout Plain Layout
For example, A6.g = minx∈ingress (x.g+LDDB(x, A6), A6.g) = E2.g+14 = 3+14=17.
 From A6’s g-value of 17, a g- value for A6’s egress neighbor A7 is computed
 (A7.newg = A6.g+1=18).
 
\series bold
The actual g-value of an egress neighbour is only changed if the new g-value
 is an improvement over the existing one (line 6).

\series default
 For example, E1’s existing g-value of 2 is not improved by the g-value
 of 3 + 1 = 4 calculated from the egress cell E2.
 The egress neighbour cells whose g-value has changed here will be the ingress
 cells for their block (nextBlock) if it is expanded.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Calculate g-values between ingress and egress cells;
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $x_{g}=min_{y\in Y}(y_{g}+LDDB(y,x),x_{g})$
\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Compute heap value for each neighbouring block.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
The right side of Figure 1 shows the g-values after expanding curBlock.
 To finish the expansion, we compute the heap value for each neighbouring
 block and, if necessary, insert it into OPEN (line 12) or update its priority
 on OPEN (line 14).
 For simplicity, assume that h = 0 for all tiles.
 The block to the right of curBlock will be added to OPEN with a heap value
 of min(4, 5, 6, 7) = 4, the block on top will be added with value 18, and
 the block below will be added again with a value of min(13, 14) = 13.
 The rea- son for the latter value is that E1’s previous g-value of 2 has
 not improved, and a g-value is not used in the heap value calculations
 if it was not updated (line 8).
 Even if a tile’s g-value is not used in the heap value calculations, it
 is stored for use later when and if its block is expanded.
 If the block being put in OPEN is already there we only update OPEN if
 its heap value has improved (line 9).
 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

Expansion Example
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/expanding-a-block.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Expanding a Block - before and after
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout BeginFrame
Expansion of a Block (cont'd)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/alg1-expansion.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Expansion Pseudocode
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
The Block A* Algorithm 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Algorithm 2 is the main procedure for Block A*; it is similar to A* except
 for the special handling of the initial pro- cessing of the blocks containing
 the goal cell (goalBlock) and the start cell (startBlock).
 The call to init(start) (line 2) computes the shortest path from the start
 cell to ev-ery reachable boundary cell in startBlock.
 Line 3 does the same for the goal cell and goalBlock.
 Special care is taken if start and goal are in the same block.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/alg2-blocka*.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Block A* Algorithm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Block A* Example
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Figure 2 illustrates how Block A* works.
 The search space is the 15 × 10 grid shown in #0.
 S and G are the start and goal cells.
 Blocks are 5 × 5, using the Manhattan heuristic.
 Cells that A* would visit have been shaded.
 In this contrived example, A* has to visit almost all the cells.
 
\end_layout

\begin_layout Plain Layout
#1 shows the results of the initialization process just described.
 startBlock, with the g-values shown, is added to OPEN.
 The main loop of Algorithm 2 then begins by removing startBlock from OPEN
 and expanding it as described above.
 There is only one valid egress cell from startBlock to block A, the top-right
 cell in startBlock with a g-value of 2.
 Hence, block A is added to OPEN with a heapvalue of 2 + 1 + 8 = 11 (2+1
 is the g-value of the egress neighbour in A, and 8 is its h-value).
 There are five valid egress cells from startBlock to block B so B is added
 to OPEN with a heap value of min(2 + 1 + 10, 1 + 1 + 11, 2 + 1 + 12, 3
 + 1 + 13, 4 + 1 + 14) = 13.
 At this point the LDDB entries for A and B have not yet been queried.
 
\end_layout

\begin_layout Plain Layout
A has the smallest heap value and becomes the next curBlock.
 This expansion of A was described in detail in Figure 1, and the right
 side of that figure shows the g- values that are computed for cells in
 A and the neighbour- ing blocks (goalBlock is above A, B is to the right
 of A, and startBlock is below A).
 By contrast, in #2 we see the g-values computed for A but not for the neighbour
ing blocks.
 This is what will be shown in every part of Fig- ure 2.
 A’s neighbors are now added to OPEN.
 There is only one egress cell from A to goalBlock, with a g-value of 17,
 so goalBlock is added to OPEN with a heap value of 17+1+5 = 23 (5 is the
 exact distance from this egress cell’s neighbour in goalBlock to the goal
 cell, which is known from the initialization step for goalBlock).
 From A one can also go to C; C is added to OPEN with the heap value min(6+1+6,
 5+1+7, 4+1+8, 3+1+9) = 13.
 There are three valid ways to go from A back to startBlock.
 Return- ing through startBlock’s top-right cell does not improve that cell’s
 g-value, so it is ignored.
 The other two paths back to startBlock reach parts of the block that are
 not reach- able from the start cell by paths wholly within startBlock.
 Since one of these might conceivably be on the shortest path to the goal,
 startBlock is added back onto OPEN with a heap value of min(12 + 1 + 10,
 13 + 1 + 11) = 23.
 
\end_layout

\begin_layout Plain Layout
B and C both have the smallest heap value (13) on OPEN at this point.
 Suppose B is chosen for expansion (#3).
 B provides new ways to enter C, and therefore updates some of the g-values
 in C, but the heap value calculated from these g-values, min(3 + 1 + 9,
 4 + 1 + 10, 5 + 1 + 11, 6 + 1 + 12, 7 + 1 + 13) = 13, is the same as its
 current heap value.
 
\end_layout

\begin_layout Plain Layout
From B we can also return to startBlock but doing so does not decrease any
 g-values in startBlock or add any new ones.
 C is expanded next; it has ingress nodes reached from both A and B (#4).
 D is added to OPEN with a heap value of 8 + 1 + 4 = 13.
 A and B are not re-inserted into OPEN because none of their cell’s g-values
 have improved.
\end_layout

\begin_layout Plain Layout
Next, D is expanded (#5) and goalBlock is reached for a second time, with
 an improved heap value of 9+1+3 = 13.
 We know, from the initialization step, that there is no path to the goal
 cell entirely within goalBlock from the cell in goalBlock that has just
 been reached from D, but that does not preclude it from being on the optimal
 path to goal, so it must not be ignored.
\end_layout

\begin_layout Plain Layout
goalBlock is now at the head of the OPEN list and is ex- panded (#6).
 It has two ingress cells.
 No path to the goal is found from D, but a path from A is found with a
 value 17 + 1 + 5 = 23.
 Like A*, Block A* cannot terminate im- mediately; it must continue until
 it is certain that no cheaper path exists.
 At the head of OPEN is startBlock (reached from A) with a heap value of
 23, therefore every remain- ing path must be at least length 23.
 Thus the path we found must be optimal.
 Block A* now terminates and reconstructs the path using back pointers (#7).
 The path from 17 to 3 in block A is stored as a set of inflection points
 (circles) in the LDDB, and these back pointers were updated during the
 search.
 The path from G to 18 of goalBlock and 2 to S in startBlock were found
 by init().
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/blocka*-execution.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of Block A* Algorithm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Any-Angle Search
\end_layout

\begin_layout BeginFrame
Any-Angle Search
\end_layout

\begin_layout Itemize
Search operate on vertices.
\end_layout

\begin_deeper
\begin_layout Itemize
But obstacles are still cell-based.
\end_layout

\end_deeper
\begin_layout Itemize
To use Block A* search on vertices, only construct a LDDB that takes exterior
 vertices of a block as input, rather than using the exterior cells.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Algorithm does not change!
\end_layout

\end_deeper
\begin_layout Itemize
For vertex blocks, the exterior vertices of a block are shared with another
 block and the corner vertices are shared with 3 other blocks.
\end_layout

\begin_layout BeginFrame
Example of Any-Angle Search
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
7cm
\end_layout

\begin_layout Block
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The shortest path from B1 to E6 using cells is 8.
 
\end_layout

\begin_layout Itemize
With an any-angle search;
\end_layout

\begin_deeper
\begin_layout Itemize
Block A* finds the optimal path B1 − D4 − E6 (dashed line) with a cost of
 5.84
\end_layout

\begin_layout Itemize
Theta* will find the suboptimal path B1 − E5 − E6 after some computation
 (open arrows) with a cost 6.
\end_layout

\begin_layout Itemize
A* will find a zig-zag-like path B1 − C2 − C3 − D4 − D5 − E6 (filled circles)
 with a cost 6.24
\end_layout

\end_deeper
\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

Any-Angle Search Representation
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/any-angle-ex.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Any-angle search results on a vertex block 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Experimental Results
\end_layout

\begin_layout BeginFrame
Experimental Results
\end_layout

\begin_layout Itemize
500 × 500 grid filled with randomly placed obstacles
\end_layout

\begin_deeper
\begin_layout Itemize
Obstacle probability ranging from 0% to 50%.
\end_layout

\end_deeper
\begin_layout Itemize
In all experiments, Block A* used the same 5 × 5 vertex block
\end_layout

\begin_layout Itemize
Starcraft (RTS), Baldur's Gate 2 and Dragon's age (FRP): Origins maps are
 used on experimental results.
\end_layout

\begin_layout BeginFrame
Experimental Results Table
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/expResults.png
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Experimental Results Table
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Why Block A* is Better?
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
7cm
\end_layout

\begin_layout Block
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Block A* benefits from the pre-computed results in LDDB to avoid work.
\end_layout

\begin_layout Itemize
The darker the diagram, the more computations needed.
\end_layout

\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

Overheads on Algorithms
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/tugcem/Documents/overheads.png
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Overheads
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Conclusion
\end_layout

\begin_layout BeginFrame
Conclusion
\end_layout

\begin_layout Itemize
Block A* performs well with both good and bad heuristics, and is always
 faster than both A* and Theta*.
 
\end_layout

\begin_layout Itemize
Block A* will always find shorter and more realistic paths compared to A*;
 paths comparable to the slower Theta*
\end_layout

\begin_layout Itemize
Theta* may be good for low obstructed areas, but flounders in open areas.
 
\end_layout

\begin_layout Itemize
A map having open and clogged areas (or can dynamically change) makes deciding
 which algorithm to use.
\end_layout

\begin_layout BeginFrame
Q & A
\end_layout

\begin_layout Standard
\align center
Any Questions?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Daniel, K.; Nash, A.; Koenig, S.; and Felner, A.
 2010.
 Theta*: Any-angle path planning on grids.
 JAIR 39:533– 579.
 
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

Ferguson, D., and Stentz, A.
 2006.
 Using interpolation to improve path planning: The field D* algorithm.
 Journal of Field Robotics 23(2):79–101.
 
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

Lozano-P ́ rez, T., and Wesley, M.
 1979.
 An algorithm for e planning collision-free paths among polyhedral obstacles.
 Communications of the ACM 22(10):560–570.
 
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

Millington, I., and Funge, J.
 2009.
 Path smoothing.
 In Artificial Intelligence in Games: 2nd Edition, 251–256.
 
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

Nash, A.; Koenig, S.; and Tovey, C.
 2010.
 Lazy theta*: Any-angle path planning and path length analysis in 3d.
 In AAAI.
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
